name: Build Docker Image
on: [push]

jobs:
  k8s:
    name: RemoteDockerImage
    runs-on: ubuntu-latest
    steps:
      - id: rethinkdb
        uses: pozetroninc/github-action-get-latest-release@master
        with:
          repository: rethinkdb/rethinkdb-dockerfiles
      - name: Checkout
        uses: actions/checkout@v2
      - name: Prepare
        id: prepare
        run: |
          echo ::set-output name=docker_image::"ghcr.io/${{ github.repository_owner }}/rethinkdb"
          echo ::set-output name=docker_repo::${{ github.repository_owner }}
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ steps.prepare.outputs.docker_image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GH CR
        uses: docker/login-action@v1
        if: ${{ github.event_name != 'pull_request' }}
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN  }}
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-base-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-base-
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./init/
          file: ./init/Dockerfile
          platforms: linux/amd64
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            UPSTREAM_IMAGE=rethinkdb:${{ steps.rethinkdb.outputs.release }}
